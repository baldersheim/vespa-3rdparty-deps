# Copyright 2018 Yahoo Holdings. Licensed under the terms of the Apache 2.0 license. See LICENSE in the project root.
diff -b -B -u -r --minimal src/cppunit/Test.cpp /home/humbe/cppunit/src/cppunit/Test.cpp
--- src/cppunit/Test.cpp	2002-07-12 07:59:57.000000000 +0200
+++ /home/humbe/cppunit/src/cppunit/Test.cpp	2011-05-11 15:05:07.000000000 +0200
@@ -6,6 +6,8 @@

 CPPUNIT_NS_BEGIN

+unsigned long Test::disabledCount = 0;
+unsigned long Test::ignoredCount = 0;

 Test *
 Test::getChildTestAt( int index ) const
diff -b -B -u -r --minimal src/cppunit/TestResultCollector.cpp /home/humbe/cppunit/src/cppunit/TestResultCollector.cpp
--- src/cppunit/TestResultCollector.cpp	2005-07-30 08:50:11.000000000 +0200
+++ /home/humbe/cppunit/src/cppunit/TestResultCollector.cpp	2011-05-11 14:28:16.000000000 +0200
@@ -1,5 +1,6 @@
 #include <cppunit/TestFailure.h>
 #include <cppunit/TestResultCollector.h>
+#include <cppunit/Test.h>


 CPPUNIT_NS_BEGIN
@@ -51,7 +52,9 @@
 void
 TestResultCollector::addFailure( const TestFailure &failure )
 {
+  if (failure.failedTest()->getType() == Test::NORMAL) {
   TestSuccessListener::addFailure( failure );
+  }

   ExclusiveZone zone( m_syncObject );
   if ( failure.isError() )
diff -b -B -u -r --minimal src/cppunit/TestResult.cpp /home/humbe/cppunit/src/cppunit/TestResult.cpp
--- src/cppunit/TestResult.cpp	2003-03-11 21:06:31.000000000 +0100
+++ /home/humbe/cppunit/src/cppunit/TestResult.cpp	2011-05-11 14:48:43.000000000 +0200
@@ -1,4 +1,5 @@
 #include <cppunit/Test.h>
+#include <cppunit/Exception.h>
 #include <cppunit/TestFailure.h>
 #include <cppunit/TestListener.h>
 #include <cppunit/TestResult.h>
@@ -8,6 +9,7 @@
 #include "ProtectorChain.h"
 #include "ProtectorContext.h"

+#include <iostream>
 CPPUNIT_NS_BEGIN


@@ -38,6 +40,7 @@
 TestResult::addError( Test *test,
                       Exception *e )
 {
+//std::cerr << "Adding error for test " << test->getName() << " with exception " << e->what() << "\n";
   TestFailure failure( test, e, true );
   addFailure( failure );
 }
@@ -46,6 +49,7 @@
 void
 TestResult::addFailure( Test *test, Exception *e )
 {
+//std::cerr << "Adding failure for test " << test->getName() << " with exception " << e->what() << "\n";
   TestFailure failure( test, e, false );
   addFailure( failure );
 }
@@ -54,6 +58,7 @@
 void
 TestResult::addFailure( const TestFailure &failure )
 {
+//std::cerr << "Adding failure with TestFailure object" << failure.failedTestName() << "\n";
   ExclusiveZone zone( m_syncObject );
   for ( TestListeners::iterator it = m_listeners.begin();
         it != m_listeners.end();
@@ -65,6 +70,7 @@
 void
 TestResult::startTest( Test *test )
 {
+//std::cerr << "TestResult::startTest\n";
   ExclusiveZone zone( m_syncObject );
   for ( TestListeners::iterator it = m_listeners.begin();
         it != m_listeners.end();
@@ -76,6 +82,7 @@
 void
 TestResult::endTest( Test *test )
 {
+// std::cerr << "TestResult::endTest\n";
   ExclusiveZone zone( m_syncObject );
   for ( TestListeners::iterator it = m_listeners.begin();
         it != m_listeners.end();
@@ -87,6 +94,7 @@
 void
 TestResult::startSuite( Test *test )
 {
+//std::cerr << "TestResult::startSuite\n";
   ExclusiveZone zone( m_syncObject );
   for ( TestListeners::iterator it = m_listeners.begin();
         it != m_listeners.end();
@@ -98,6 +106,7 @@
 void
 TestResult::endSuite( Test *test )
 {
+//std::cerr << "TestResult::endSuite\n";
   ExclusiveZone zone( m_syncObject );
   for ( TestListeners::iterator it = m_listeners.begin();
         it != m_listeners.end();
diff -b -B -u -r --minimal src/cppunit/TestRunner.cpp /home/humbe/cppunit/src/cppunit/TestRunner.cpp
--- src/cppunit/TestRunner.cpp	2011-05-11 15:44:39.000000000 +0200
+++ /home/humbe/cppunit/src/cppunit/TestRunner.cpp	2011-05-11 12:50:35.000000000 +0200
@@ -93,7 +93,14 @@
   TestPath path = m_suite->resolveTestPath( testPath );
   Test *testToRun = path.getChildTest();

+  try{
+      std::cerr << "Running test\n";
   controller.runTest( testToRun );
+  } catch (std::exception& e) {
+      std::cerr << "Caught std exception: " << e.what() << "\n";
+  } catch (...) {
+      std::cerr << "Caught unknown exception\n";
+  }
 }


diff -b -B -u -r --minimal src/cppunit/TestSuite.cpp /home/humbe/cppunit/src/cppunit/TestSuite.cpp
--- src/cppunit/TestSuite.cpp	2011-05-11 15:44:39.000000000 +0200
+++ /home/humbe/cppunit/src/cppunit/TestSuite.cpp	2011-05-11 14:53:41.000000000 +0200
@@ -5,6 +5,7 @@

 CPPUNIT_NS_BEGIN

+unsigned long TestSuite::disabledTests = 0;

 /// Default constructor
 TestSuite::TestSuite( std::string name )
@@ -45,9 +46,13 @@
     CppUnitVector<Test *> remaining;
     for (uint32_t i=0; i<m_tests.size(); ++i) {
         if (!m_tests[i]->filter(f)) {
+            if (m_tests[i]->getType() == Test::DISABLED) {
+                ++disabledTests;
+            } else {
             remaining.push_back(m_tests[i]);
         }
     }
+    }
     remaining.swap(m_tests);
     return false;
 }
diff -b -B -u -r --minimal src/cppunit/TextOutputter.cpp /home/humbe/cppunit/src/cppunit/TextOutputter.cpp
--- src/cppunit/TextOutputter.cpp	2004-06-25 12:41:28.000000000 +0200
+++ /home/humbe/cppunit/src/cppunit/TextOutputter.cpp	2011-05-11 15:40:58.000000000 +0200
@@ -1,7 +1,9 @@
 #include <cppunit/Exception.h>
 #include <cppunit/SourceLine.h>
 #include <cppunit/TestFailure.h>
+#include <cppunit/TestSuite.h>
 #include <cppunit/TextOutputter.h>
+#include <cppunit/TextTestProgressListener.h>
 #include <cppunit/TestResultCollector.h>


@@ -53,6 +55,9 @@
   printFailureTestName( failure );
   m_stream << ' ';
   printFailureType( failure );
+  if (failure->failedTest()->getType() == Test::IGNORED) {
+      m_stream << " (ignored)";
+  }
   m_stream << ' ';
   printFailureLocation( failure->sourceLine() );
   m_stream << "\n";
@@ -107,9 +112,20 @@
 TextOutputter::printHeader()
 {
   if ( m_result->wasSuccessful() )
-    m_stream << "\nOK (" << m_result->runTests () << " tests)\n" ;
-  else
   {
+    unsigned long ignored = TextTestProgressListener::ignoredTests;
+    unsigned long disabled = TestSuite::disabledTests;
+    m_stream << "\nOK (" << (m_result->runTests() - ignored) << " tests)";
+    if (ignored > 0) {
+        m_stream << " (Ignored " << ignored << " failing test"
+                 << (ignored > 1 ? "s" : "") << ")";
+    }
+    if (disabled > 0) {
+        m_stream << " (" << disabled << " test"
+                 << (disabled > 1 ? "s" : "") << " disabled)";
+    }
+    m_stream << "\n";
+  } else {
     m_stream << "\n";
     printFailureWarning();
     printStatistics();
@@ -120,17 +136,20 @@
 void
 TextOutputter::printFailureWarning()
 {
-  m_stream  << "!!!FAILURES!!!\n";
+  m_stream  << "!!! FAILURES !!!\n";
 }


 void
 TextOutputter::printStatistics()
 {
+unsigned long ignored = TextTestProgressListener::ignoredTests;
+unsigned long disabled = TestSuite::disabledTests;
   m_stream  << "Test Results:\n";

   m_stream  <<  "Run:  "  <<  m_result->runTests()
-            <<  "   Failures: "  <<  m_result->testFailures()
+            <<  "   Failures: "  <<  (m_result->testFailures() - ignored)
+            <<  "   Ignored Failures: " << ignored
             <<  "   Errors: "  <<  m_result->testErrors()
             <<  "\n";
 }
diff -b -B -u -r --minimal src/cppunit/TextTestProgressListener.cpp /home/humbe/cppunit/src/cppunit/TextTestProgressListener.cpp
--- src/cppunit/TextTestProgressListener.cpp	2011-05-11 15:44:39.000000000 +0200
+++ /home/humbe/cppunit/src/cppunit/TextTestProgressListener.cpp	2011-05-11 14:49:42.000000000 +0200
@@ -31,6 +31,8 @@
 uint64_t TextTestProgressListener::startTime = 0;
 uint32_t TextTestProgressListener::nameLen = 0;

+unsigned long TextTestProgressListener::ignoredTests = 0;
+
 TextTestProgressListener::TextTestProgressListener()
 {
 }
@@ -77,6 +79,10 @@
   } else {
   stdCOut() << ( failure.isError() ? "E" : "F" );
   }
+  if (failure.failedTest()->getType() == Test::IGNORED) {
+    ++ignoredTests;
+    stdCOut() << " (ignored)";
+  }
   stdCOut().flush();
 }

diff -b -B -u -r --minimal src/cppunit/TextTestResult.cpp /home/humbe/cppunit/src/cppunit/TextTestResult.cpp
--- src/cppunit/TextTestResult.cpp	2004-06-25 13:11:45.000000000 +0200
+++ /home/humbe/cppunit/src/cppunit/TextTestResult.cpp	2011-05-11 14:29:09.000000000 +0200
@@ -20,6 +20,9 @@
 {
   TestResultCollector::addFailure( failure );
   stdCOut() << ( failure.isError() ? "E" : "F" );
+  if (failure.failedTest()->getType() == Test::IGNORED) {
+      stdCOut() << " (ignored)";
+  }
 }


diff -b -B -u -r --minimal include/cppunit/extensions/HelperMacros.h /home/humbe/cppunit/include/cppunit/extensions/HelperMacros.h
--- include/cppunit/extensions/HelperMacros.h	2004-03-13 13:52:56.000000000 +0100
+++ /home/humbe/cppunit/include/cppunit/extensions/HelperMacros.h	2011-05-11 14:23:43.000000000 +0200
@@ -300,6 +300,20 @@
                   &TestFixtureType::testMethod,           \
                   context.makeFixture() ) ) )

+#define CPPUNIT_TEST_IGNORED( testMethod )                        \
+    CPPUNIT_TEST_SUITE_ADD_TEST(                           \
+        ( &(new CPPUNIT_NS::TestCaller<TestFixtureType>(    \
+                  context.getTestNameFor( #testMethod),   \
+                  &TestFixtureType::testMethod,           \
+                  context.makeFixture() ))->setType(CPPUNIT_NS::Test::IGNORED) ) )
+
+#define CPPUNIT_TEST_DISABLED( testMethod )                        \
+    CPPUNIT_TEST_SUITE_ADD_TEST(                           \
+        ( &(new CPPUNIT_NS::TestCaller<TestFixtureType>(    \
+                  context.getTestNameFor( #testMethod),   \
+                  &TestFixtureType::testMethod,           \
+                  context.makeFixture() ))->setType(CPPUNIT_NS::Test::DISABLED) ) )
+
 /*! \brief Add a test which fail if the specified exception is not caught.
  *
  * Example:
diff -b -B -u -r --minimal include/cppunit/Test.h /home/humbe/cppunit/include/cppunit/Test.h
--- include/cppunit/Test.h	2011-05-11 15:44:39.000000000 +0200
+++ /home/humbe/cppunit/include/cppunit/Test.h	2011-05-11 15:05:10.000000000 +0200
@@ -26,6 +26,19 @@
 class CPPUNIT_API Test
 {
 public:
+  static unsigned long disabledCount;
+  static unsigned long ignoredCount;
+  enum Type { NORMAL, IGNORED, DISABLED };
+  Type _type;
+  Test() : _type(NORMAL) {}
+  Test& setType(Type t) {
+      _type = t;
+      if (t == IGNORED) ++ignoredCount;
+      if (t == DISABLED) ++disabledCount;
+      return *this;
+  }
+  Type getType() const { return _type; }
+
   virtual ~Test() {};

   /*! \brief Run the test, collecting results.
diff -b -B -u -r --minimal include/cppunit/TestSuite.h /home/humbe/cppunit/include/cppunit/TestSuite.h
--- include/cppunit/TestSuite.h	2011-05-11 15:44:39.000000000 +0200
+++ /home/humbe/cppunit/include/cppunit/TestSuite.h	2011-05-11 14:53:58.000000000 +0200
@@ -40,6 +40,7 @@
 class CPPUNIT_API TestSuite : public TestComposite
 {
 public:
+  static unsigned long disabledTests;
   /*! Constructs a test suite with the specified name.
    */
   TestSuite( std::string name = "" );
diff -b -B -u -r --minimal include/cppunit/TextTestProgressListener.h /home/humbe/cppunit/include/cppunit/TextTestProgressListener.h
--- include/cppunit/TextTestProgressListener.h	2011-05-11 15:44:39.000000000 +0200
+++ /home/humbe/cppunit/include/cppunit/TextTestProgressListener.h	2011-05-11 14:49:24.000000000 +0200
@@ -16,6 +16,8 @@
 class CPPUNIT_API TextTestProgressListener : public TestListener
 {
 public:
+  static unsigned long ignoredTests;
+
   /*! Constructs a TextTestProgressListener object.
    */
   TextTestProgressListener();
